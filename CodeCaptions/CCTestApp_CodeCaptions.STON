CodeCaptionProject {	#name : 'CCTestApp',	#codeCaptions : Set [		CodeCaptionComment {			#id : 705299968,			#repository : 'IceLibgitRepository(CCTestApp)',			#package : RPackage {				#classDefinedSelectors : {					#Role : Set [						#name,						#'name:'					],					#Project : Set [						#'tasks:',						#name,						#computeTheTotalCompletionPercentageOfTheProjectTasks,						#'positions:',						#'name:',						#initialize,						#positions,						#tasks,						#'completionPercentage:',						#completionPercentage					],					#Task : Set [						#'name:',						#'employees:',						#initialize,						#employees,						#'completed:',						#name,						#completed					],					#Position : Set [						#'role:',						#person,						#'person:',						#role					],					#Person : Set [						#name,						#'name:'					],					#Employee : Set [						#initialize,						#'leader:',						#'doTask:',						#leader					],					#Leader : Set [						#'addEmployee:',						#'employees:',						#employees,						#initialize,						#'assignTask:toEmployee:',						#'task:hasEmployee:'					]				},				#metaclassDefinedSelectors : {					#Task : Set [						#'newWithName:'					],					#Position : Set [						#'newWithPerson:role:'					]				},				#classExtensionSelectors : { },				#metaclassExtensionSelectors : { },				#classes : Set [					#Role,					#Project,					#Task,					#Position,					#Person,					#ManifestCCTestApp,					#Employee,					#Leader				],				#name : #CCTestApp,				#classTags : Set [					RPackageTag {						#package : @4,						#name : #Project,						#classNames : Set [							#Role,							#Project,							#Task,							#Position,							#Person,							#Employee,							#Leader						]					},					RPackageTag {						#package : @4,						#name : #Manifest,						#classNames : Set [							#ManifestCCTestApp						]					}				]			},			#captionNode : CodeCaptionSource {				#methodNode : 'RBMethodNode selector: #task:hasEmployee: arguments: {RBVariableNode named: #aTask. RBVariableNode named: #anEmployee. } body: (RBSequenceNode statements: {RBReturnNode value: (RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #aTask) selector: #employees) selector: #includes: arguments: {RBVariableNode named: #anEmployee. }). })',				#node : 'RBReturnNode value: (RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #aTask) selector: #employees) selector: #includes: arguments: {RBVariableNode named: #anEmployee. })',				#nodeClass : Class [ #Leader ]			},			#nodeFound : true,			#comment : 'Envidia de atributos de Task. Debería delegar esta responsabilidad a Task y no acceder directamente a su colección de empleados.',			#author : 'NahuelAparicio',			#timeStamp : DateAndTime [ '2022-04-13T20:57:47.94618-03:00' ]		},		CodeCaptionComment {			#id : 350328320,			#repository : 'IceLibgitRepository(CCTestApp)',			#package : RPackage {				#classDefinedSelectors : {					#Leader : Set [						#'addEmployee:',						#'employees:',						#employees,						#initialize,						#'assignTask:toEmployee:',						#'task:hasEmployee:'					],					#Project : Set [						#'tasks:',						#name,						#computeTheTotalCompletionPercentageOfTheProjectTasks,						#'positions:',						#'name:',						#initialize,						#positions,						#tasks,						#'completionPercentage:',						#completionPercentage					],					#Task : Set [						#completed,						#'employees:',						#initialize,						#employees,						#'completed:',						#name,						#'name:'					],					#Person : Set [						#name,						#'name:'					],					#Position : Set [						#'role:',						#person,						#'person:',						#role					],					#Employee : Set [						#initialize,						#'doTask:',						#leader,						#'leader:'					],					#Role : Set [						#name,						#'name:'					]				},				#metaclassDefinedSelectors : {					#Task : Set [						#'newWithName:'					],					#Position : Set [						#'newWithPerson:role:'					]				},				#classExtensionSelectors : { },				#metaclassExtensionSelectors : { },				#classes : Set [					#Leader,					#Project,					#Task,					#Person,					#Position,					#ManifestCCTestApp,					#Employee,					#Role				],				#name : #CCTestApp,				#classTags : Set [					RPackageTag {						#package : @28,						#name : #Project,						#classNames : Set [							#Leader,							#Project,							#Task,							#Person,							#Position,							#Employee,							#Role						]					},					RPackageTag {						#package : @28,						#name : #Manifest,						#classNames : Set [							#ManifestCCTestApp						]					}				]			},			#captionNode : CodeCaptionSource {				#methodNode : 'RBMethodNode selector: #initialize body: (RBSequenceNode statements: {RBAssignmentNode variable: (RBVariableNode named: #leader) value: (RBMessageNode receiver: (RBVariableNode named: #OrderedCollection) selector: #new). })',				#node : 'RBAssignmentNode variable: (RBVariableNode named: #leader) value: (RBMessageNode receiver: (RBVariableNode named: #OrderedCollection) selector: #new)',				#nodeClass : Class [ #Employee ]			},			#nodeFound : false,			#comment : 'No inicializar la variable de instancia leader como una colección.',			#author : 'NahuelAparicio',			#timeStamp : DateAndTime [ '2022-04-13T20:59:14.691293-03:00' ]		},		CodeCaptionComment {			#id : 249327616,			#repository : 'IceLibgitRepository(CCTestApp)',			#package : RPackage {				#classDefinedSelectors : {					#Role : Set [						#name,						#'name:'					],					#Project : Set [						#'tasks:',						#name,						#computeTheTotalCompletionPercentageOfTheProjectTasks,						#'positions:',						#'name:',						#initialize,						#positions,						#tasks,						#'completionPercentage:',						#completionPercentage					],					#Task : Set [						#'name:',						#'employees:',						#initialize,						#employees,						#'completed:',						#name,						#completed					],					#Position : Set [						#'role:',						#person,						#'person:',						#role					],					#Person : Set [						#name,						#'name:'					],					#Employee : Set [						#initialize,						#'leader:',						#leader,						#'doTask:'					],					#Leader : Set [						#'addEmployee:',						#'employees:',						#employees,						#initialize,						#'assignTask:toEmployee:',						#'task:hasEmployee:'					]				},				#metaclassDefinedSelectors : {					#Task : Set [						#'newWithName:'					],					#Position : Set [						#'newWithPerson:role:'					]				},				#classExtensionSelectors : { },				#metaclassExtensionSelectors : { },				#classes : Set [					#Role,					#Project,					#Task,					#Position,					#Person,					#ManifestCCTestApp,					#Employee,					#Leader				],				#name : #CCTestApp,				#classTags : Set [					RPackageTag {						#package : @52,						#name : #Project,						#classNames : Set [							#Role,							#Project,							#Task,							#Position,							#Person,							#Employee,							#Leader						]					},					RPackageTag {						#package : @52,						#name : #Manifest,						#classNames : Set [							#ManifestCCTestApp						]					}				]			},			#captionNode : CodeCaptionSource {				#methodNode : 'RBMethodNode selector: #doTask: arguments: {RBVariableNode named: #aTask. } body: (RBSequenceNode temporaries: {RBVariableNode named: #isMyTask. } statements: {RBAssignmentNode variable: (RBVariableNode named: #isMyTask) value: (RBLiteralValueNode value: false). RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #aTask) selector: #employees) selector: #do: arguments: {RBBlockNode arguments: {RBVariableNode named: #e. } body: (RBSequenceNode statements: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #e) selector: #\'==\' arguments: {RBVariableNode named: #self. }) selector: #ifTrue: arguments: {RBBlockNode body: (RBSequenceNode statements: {RBAssignmentNode variable: (RBVariableNode named: #isMyTask) value: (RBLiteralValueNode value: true). }). }. }). }. RBMessageNode receiver: (RBVariableNode named: #isMyTask) selector: #ifTrue:ifFalse: arguments: {RBBlockNode body: (RBSequenceNode statements: {RBMessageNode receiver: (RBVariableNode named: #aTask) selector: #completed: arguments: {RBLiteralValueNode value: true. }. RBReturnNode value: (RBLiteralValueNode value: true). }). RBBlockNode body: (RBSequenceNode statements: {RBReturnNode value: (RBLiteralValueNode value: false). }). }. })',				#node : 'RBMessageNode receiver: (RBVariableNode named: #aTask) selector: #completed: arguments: {RBLiteralValueNode value: true. }',				#nodeClass : @49			},			#nodeFound : false,			#comment : 'Hay envidia de atributos de Task, está modificando el atributo \'completed\' y recorriendo sus empleados para buscarse a sí mismo.',			#author : 'NahuelAparicio',			#timeStamp : DateAndTime [ '2022-04-13T21:02:06.20793-03:00' ]		},		CodeCaptionComment {			#id : 660797952,			#repository : 'IceLibgitRepository(CCTestApp)',			#package : RPackage {				#classDefinedSelectors : {					#Role : Set [						#name,						#'name:'					],					#Project : Set [						#'tasks:',						#name,						#computeTheTotalCompletionPercentageOfTheProjectTasks,						#'positions:',						#'name:',						#initialize,						#positions,						#tasks,						#'completionPercentage:',						#completionPercentage					],					#Task : Set [						#'name:',						#'employees:',						#initialize,						#employees,						#'completed:',						#name,						#completed					],					#Position : Set [						#'role:',						#person,						#'person:',						#role					],					#Person : Set [						#name,						#'name:'					],					#Employee : Set [						#initialize,						#'leader:',						#'doTask:',						#leader					],					#Leader : Set [						#'addEmployee:',						#'employees:',						#employees,						#initialize,						#'assignTask:toEmployee:',						#'task:hasEmployee:'					]				},				#metaclassDefinedSelectors : {					#Task : Set [						#'newWithName:'					],					#Position : Set [						#'newWithPerson:role:'					]				},				#classExtensionSelectors : { },				#metaclassExtensionSelectors : { },				#classes : Set [					#Role,					#Project,					#Task,					#Position,					#Person,					#ManifestCCTestApp,					#Employee,					#Leader				],				#name : #CCTestApp,				#classTags : Set [					RPackageTag {						#package : @75,						#name : #Project,						#classNames : Set [							#Role,							#Project,							#Task,							#Position,							#Person,							#Employee,							#Leader						]					},					RPackageTag {						#package : @75,						#name : #Manifest,						#classNames : Set [							#ManifestCCTestApp						]					}				]			},			#captionNode : CodeCaptionSource {				#methodNode : 'RBMethodNode selector: #computeTheTotalCompletionPercentageOfTheProjectTasks body: (RBSequenceNode temporaries: {RBVariableNode named: #completedTasks. } statements: {RBAssignmentNode variable: (RBVariableNode named: #completedTasks) value: (RBMessageNode receiver: (RBVariableNode named: #OrderedCollection) selector: #new). RBMessageNode receiver: (RBVariableNode named: #tasks) selector: #do: arguments: {RBBlockNode arguments: {RBVariableNode named: #t. } body: (RBSequenceNode statements: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #t) selector: #completed) selector: #ifTrue: arguments: {RBBlockNode body: (RBSequenceNode statements: {RBMessageNode receiver: (RBVariableNode named: #completedTasks) selector: #add: arguments: {RBVariableNode named: #t. }. }). }. }). }. RBAssignmentNode variable: (RBVariableNode named: #completionPercentage) value: (RBMessageNode receiver: (RBMessageNode receiver: (RBMessageNode receiver: (RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #completedTasks) selector: #size) selector: #/ arguments: {RBMessageNode receiver: (RBVariableNode named: #tasks) selector: #size. }) selector: #asFloat) selector: #* arguments: {RBLiteralValueNode value: 100. }) selector: #round: arguments: {RBLiteralValueNode value: 2. }). })',				#node : 'RBMessageNode receiver: (RBVariableNode named: #tasks) selector: #do: arguments: {RBBlockNode arguments: {RBVariableNode named: #t. } body: (RBSequenceNode statements: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #t) selector: #completed) selector: #ifTrue: arguments: {RBBlockNode body: (RBSequenceNode statements: {RBMessageNode receiver: (RBVariableNode named: #completedTasks) selector: #add: arguments: {RBVariableNode named: #t. }. }). }. }). }',				#nodeClass : Class [ #Project ]			},			#nodeFound : true,			#comment : 'Usar select: en lugar de do:',			#author : 'NahuelAparicio',			#timeStamp : DateAndTime [ '2022-04-13T21:07:00.642763-03:00' ]		},		CodeCaptionComment {			#id : 990939648,			#repository : 'IceLibgitRepository(CCTestApp)',			#package : RPackage {				#classDefinedSelectors : {					#Leader : Set [						#'addEmployee:',						#'employees:',						#employees,						#initialize,						#'assignTask:toEmployee:',						#'task:hasEmployee:'					],					#Project : Set [						#'tasks:',						#name,						#computeTheTotalCompletionPercentageOfTheProjectTasks,						#'positions:',						#'name:',						#initialize,						#positions,						#tasks,						#'completionPercentage:',						#completionPercentage					],					#Task : Set [						#completed,						#'employees:',						#initialize,						#employees,						#'completed:',						#name,						#'name:'					],					#Person : Set [						#name,						#'name:'					],					#Position : Set [						#'role:',						#person,						#'person:',						#role					],					#Employee : Set [						#initialize,						#leader,						#'doTask:',						#'leader:'					],					#Role : Set [						#name,						#'name:'					]				},				#metaclassDefinedSelectors : {					#Task : Set [						#'newWithName:'					],					#Position : Set [						#'newWithPerson:role:'					]				},				#classExtensionSelectors : { },				#metaclassExtensionSelectors : { },				#classes : Set [					#Leader,					#Project,					#Task,					#Person,					#Position,					#ManifestCCTestApp,					#Employee,					#Role				],				#name : #CCTestApp,				#classTags : Set [					RPackageTag {						#package : @99,						#name : #Project,						#classNames : Set [							#Leader,							#Project,							#Task,							#Person,							#Position,							#Employee,							#Role						]					},					RPackageTag {						#package : @99,						#name : #Manifest,						#classNames : Set [							#ManifestCCTestApp						]					}				]			},			#captionNode : CodeCaptionSource {				#methodNode : 'RBMethodNode selector: #assignTask:toEmployee: arguments: {RBVariableNode named: #aTask. RBVariableNode named: #anEmployee. } body: (RBSequenceNode statements: {RBMessageNode receiver: (RBMessageNode receiver: (RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #anEmployee) selector: #class) selector: #name) selector: #= arguments: {RBLiteralValueNode value: \'Leader\'. }) selector: #ifTrue: arguments: {RBBlockNode body: (RBSequenceNode statements: {RBReturnNode value: (RBLiteralValueNode value: false). }). }. RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #aTask) selector: #employees) selector: #add: arguments: {RBVariableNode named: #anEmployee. }. })',				#node : 'RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #aTask) selector: #employees) selector: #add: arguments: {RBVariableNode named: #anEmployee. }',				#nodeClass : @25			},			#nodeFound : true,			#comment : 'Evitar envidia de atributos de Task desde Leader. Asume que existe una colección de empleados en Task e intenta manipularla directamente. Se debe delegar esa responsabilidad a Task.',			#author : 'NahuelAparicio',			#timeStamp : DateAndTime [ '2022-04-13T20:55:38.047983-03:00' ]		},		CodeCaptionComment {			#id : 664726016,			#repository : 'IceLibgitRepository(CCTestApp)',			#package : RPackage {				#classDefinedSelectors : {					#Role : Set [						#name,						#'name:'					],					#Project : Set [						#'tasks:',						#name,						#computeTheTotalCompletionPercentageOfTheProjectTasks,						#'positions:',						#'name:',						#initialize,						#positions,						#tasks,						#'completionPercentage:',						#completionPercentage					],					#Task : Set [						#'name:',						#'employees:',						#initialize,						#employees,						#'completed:',						#name,						#completed					],					#Position : Set [						#'role:',						#person,						#'person:',						#role					],					#Person : Set [						#name,						#'name:'					],					#Employee : Set [						#initialize,						#'leader:',						#leader,						#'doTask:'					],					#Leader : Set [						#'addEmployee:',						#'employees:',						#employees,						#initialize,						#'assignTask:toEmployee:',						#'task:hasEmployee:'					]				},				#metaclassDefinedSelectors : {					#Task : Set [						#'newWithName:'					],					#Position : Set [						#'newWithPerson:role:'					]				},				#classExtensionSelectors : { },				#metaclassExtensionSelectors : { },				#classes : Set [					#Role,					#Project,					#Task,					#Position,					#Person,					#ManifestCCTestApp,					#Employee,					#Leader				],				#name : #CCTestApp,				#classTags : Set [					RPackageTag {						#package : @122,						#name : #Project,						#classNames : Set [							#Role,							#Project,							#Task,							#Position,							#Person,							#Employee,							#Leader						]					},					RPackageTag {						#package : @122,						#name : #Manifest,						#classNames : Set [							#ManifestCCTestApp						]					}				]			},			#captionNode : CodeCaptionSource {				#methodNode : 'RBMethodNode selector: #assignTask:toEmployee: arguments: {RBVariableNode named: #aTask. RBVariableNode named: #anEmployee. } body: (RBSequenceNode statements: {RBMessageNode receiver: (RBMessageNode receiver: (RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #anEmployee) selector: #class) selector: #name) selector: #= arguments: {RBLiteralValueNode value: \'Leader\'. }) selector: #ifTrue: arguments: {RBBlockNode body: (RBSequenceNode statements: {RBReturnNode value: (RBLiteralValueNode value: false). }). }. RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #aTask) selector: #employees) selector: #add: arguments: {RBVariableNode named: #anEmployee. }. })',				#node : 'RBMessageNode receiver: (RBMessageNode receiver: (RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #anEmployee) selector: #class) selector: #name) selector: #= arguments: {RBLiteralValueNode value: \'Leader\'. }) selector: #ifTrue: arguments: {RBBlockNode body: (RBSequenceNode statements: {RBReturnNode value: (RBLiteralValueNode value: false). }). }',				#nodeClass : @25			},			#nodeFound : true,			#comment : 'No pregutnar por la clase del empleado',			#author : 'NahuelAparicio',			#timeStamp : DateAndTime [ '2022-04-13T20:54:12.350064-03:00' ]		},		CodeCaptionComment {			#id : 695258112,			#repository : 'IceLibgitRepository(CCTestApp)',			#package : RPackage {				#classDefinedSelectors : {					#Leader : Set [						#'addEmployee:',						#'employees:',						#employees,						#initialize,						#'assignTask:toEmployee:',						#'task:hasEmployee:'					],					#Project : Set [						#'tasks:',						#name,						#computeTheTotalCompletionPercentageOfTheProjectTasks,						#'positions:',						#'name:',						#initialize,						#positions,						#tasks,						#'completionPercentage:',						#completionPercentage					],					#Task : Set [						#completed,						#'employees:',						#initialize,						#employees,						#'completed:',						#name,						#'name:'					],					#Person : Set [						#name,						#'name:'					],					#Position : Set [						#'role:',						#person,						#'person:',						#role					],					#Employee : Set [						#initialize,						#leader,						#'doTask:',						#'leader:'					],					#Role : Set [						#name,						#'name:'					]				},				#metaclassDefinedSelectors : {					#Task : Set [						#'newWithName:'					],					#Position : Set [						#'newWithPerson:role:'					]				},				#classExtensionSelectors : { },				#metaclassExtensionSelectors : { },				#classes : Set [					#Leader,					#Project,					#Task,					#Person,					#Position,					#ManifestCCTestApp,					#Employee,					#Role				],				#name : #CCTestApp,				#classTags : Set [					RPackageTag {						#package : @145,						#name : #Project,						#classNames : Set [							#Leader,							#Project,							#Task,							#Person,							#Position,							#Employee,							#Role						]					},					RPackageTag {						#package : @145,						#name : #Manifest,						#classNames : Set [							#ManifestCCTestApp						]					}				]			},			#captionNode : CodeCaptionSource {				#methodNode : 'RBMethodNode selector: #computeTheTotalCompletionPercentageOfTheProjectTasks body: (RBSequenceNode temporaries: {RBVariableNode named: #completedTasks. } statements: {RBAssignmentNode variable: (RBVariableNode named: #completedTasks) value: (RBMessageNode receiver: (RBVariableNode named: #OrderedCollection) selector: #new). RBMessageNode receiver: (RBVariableNode named: #tasks) selector: #do: arguments: {RBBlockNode arguments: {RBVariableNode named: #t. } body: (RBSequenceNode statements: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #t) selector: #completed) selector: #ifTrue: arguments: {RBBlockNode body: (RBSequenceNode statements: {RBMessageNode receiver: (RBVariableNode named: #completedTasks) selector: #add: arguments: {RBVariableNode named: #t. }. }). }. }). }. RBAssignmentNode variable: (RBVariableNode named: #completionPercentage) value: (RBMessageNode receiver: (RBMessageNode receiver: (RBMessageNode receiver: (RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #completedTasks) selector: #size) selector: #/ arguments: {RBMessageNode receiver: (RBVariableNode named: #tasks) selector: #size. }) selector: #asFloat) selector: #* arguments: {RBLiteralValueNode value: 100. }) selector: #round: arguments: {RBLiteralValueNode value: 2. }). })',				#node : 'RBAssignmentNode variable: (RBVariableNode named: #completionPercentage) value: (RBMessageNode receiver: (RBMessageNode receiver: (RBMessageNode receiver: (RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #completedTasks) selector: #size) selector: #/ arguments: {RBMessageNode receiver: (RBVariableNode named: #tasks) selector: #size. }) selector: #asFloat) selector: #* arguments: {RBLiteralValueNode value: 100. }) selector: #round: arguments: {RBLiteralValueNode value: 2. })',				#nodeClass : @96			},			#nodeFound : false,			#comment : 'Debería retornar el porcentaje y no usar esta variable de instancia que sólo se usa en este método.',			#author : 'NahuelAparicio',			#timeStamp : DateAndTime [ '2022-04-13T21:04:39.2095-03:00' ]		}	],	#packages : Set [		@122	],	#gitDirectory : 'pharo-local/iceberg/nahux/CCTestApp'}