CodeCaptionProject {	#name : 'CCTestApp',	#codeCaptions : Set [		CodeCaptionComment {			#id : 868408064,			#repository : 'IceLibgitRepository(CCTestApp)',			#package : RPackage {				#classDefinedSelectors : {					#Leader : Set [						#'addEmployee:',						#'employees:',						#employees,						#initialize,						#'assignTask:toEmployee:',						#'task:hasEmployee:'					],					#Project : Set [						#'tasks:',						#name,						#computeTheTotalCompletionPercentageOfTheProjectTasks,						#'positions:',						#'name:',						#initialize,						#positions,						#tasks,						#'completionPercentage:',						#completionPercentage					],					#Task : Set [						#completed,						#'employees:',						#initialize,						#employees,						#'completed:',						#name,						#'name:'					],					#Person : Set [						#name,						#'name:'					],					#Position : Set [						#'role:',						#person,						#'person:',						#role					],					#Employee : Set [						#initialize,						#leader,						#'doTask:',						#'leader:'					],					#Role : Set [						#name,						#'name:'					]				},				#metaclassDefinedSelectors : {					#Task : Set [						#'newWithName:'					],					#Position : Set [						#'newWithPerson:role:'					]				},				#classExtensionSelectors : { },				#metaclassExtensionSelectors : { },				#classes : Set [					#Leader,					#Project,					#Task,					#Person,					#Position,					#ManifestCCTestApp,					#Employee,					#Role				],				#name : #CCTestApp,				#classTags : Set [					RPackageTag {						#package : @4,						#name : #Manifest,						#classNames : Set [							#ManifestCCTestApp						]					},					RPackageTag {						#package : @4,						#name : #Project,						#classNames : Set [							#Leader,							#Project,							#Task,							#Person,							#Position,							#Employee,							#Role						]					}				]			},			#captionNode : CodeCaptionSource {				#methodNode : 'RBMethodNode selector: #doTask: arguments: {RBVariableNode named: #aTask. } body: (RBSequenceNode temporaries: {RBVariableNode named: #isMyTask. } statements: {RBAssignmentNode variable: (RBVariableNode named: #isMyTask) value: (RBLiteralValueNode value: false). RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #aTask) selector: #employees) selector: #do: arguments: {RBBlockNode arguments: {RBVariableNode named: #e. } body: (RBSequenceNode statements: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #e) selector: #\'==\' arguments: {RBVariableNode named: #self. }) selector: #ifTrue: arguments: {RBBlockNode body: (RBSequenceNode statements: {RBAssignmentNode variable: (RBVariableNode named: #isMyTask) value: (RBLiteralValueNode value: true). }). }. }). }. RBMessageNode receiver: (RBVariableNode named: #isMyTask) selector: #ifTrue:ifFalse: arguments: {RBBlockNode body: (RBSequenceNode statements: {RBMessageNode receiver: (RBVariableNode named: #aTask) selector: #completed: arguments: {RBLiteralValueNode value: true. }. RBReturnNode value: (RBLiteralValueNode value: true). }). RBBlockNode body: (RBSequenceNode statements: {RBReturnNode value: (RBLiteralValueNode value: false). }). }. })',				#node : 'RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #aTask) selector: #employees) selector: #do: arguments: {RBBlockNode arguments: {RBVariableNode named: #e. } body: (RBSequenceNode statements: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #e) selector: #\'==\' arguments: {RBVariableNode named: #self. }) selector: #ifTrue: arguments: {RBBlockNode body: (RBSequenceNode statements: {RBAssignmentNode variable: (RBVariableNode named: #isMyTask) value: (RBLiteralValueNode value: true). }). }. }). }',				#nodeClass : Class [ #Employee ]			},			#nodeFound : true,			#comment : '',			#author : 'TestReviewer',			#timeStamp : DateAndTime [ '2021-12-26T14:38:01.47203-03:00' ]		}	],	#packages : Set [		RPackage {			#classDefinedSelectors : {				#Role : Set [					#name,					#'name:'				],				#Project : Set [					#'tasks:',					#name,					#computeTheTotalCompletionPercentageOfTheProjectTasks,					#'positions:',					#'name:',					#initialize,					#positions,					#tasks,					#'completionPercentage:',					#completionPercentage				],				#Task : Set [					#'name:',					#'employees:',					#initialize,					#employees,					#'completed:',					#name,					#completed				],				#Position : Set [					#'role:',					#person,					#'person:',					#role				],				#Person : Set [					#name,					#'name:'				],				#Employee : Set [					#initialize,					#'leader:',					#leader,					#'doTask:'				],				#Leader : Set [					#'addEmployee:',					#'employees:',					#employees,					#initialize,					#'assignTask:toEmployee:',					#'task:hasEmployee:'				]			},			#metaclassDefinedSelectors : {				#Task : Set [					#'newWithName:'				],				#Position : Set [					#'newWithPerson:role:'				]			},			#classExtensionSelectors : { },			#metaclassExtensionSelectors : { },			#classes : Set [				#Role,				#Project,				#Task,				#Position,				#Person,				#ManifestCCTestApp,				#Employee,				#Leader			],			#name : #CCTestApp,			#classTags : Set [				RPackageTag {					#package : @28,					#name : #Manifest,					#classNames : Set [						#ManifestCCTestApp					]				},				RPackageTag {					#package : @28,					#name : #Project,					#classNames : Set [						#Role,						#Project,						#Task,						#Position,						#Person,						#Employee,						#Leader					]				}			]		}	],	#gitDirectory : 'pharo-local/iceberg/nahux/CCTestApp'}'==\' arguments: {RBVariableNode named: #self. }) selector: #ifTrue: arguments: {RBBlockNode body: (RBSequenceNode statements: {RBAssignmentNode variable: (RBVariableNode named: #isMyTask) value: (RBLiteralValueNode value: true). }). }. }). }. RBMessageNode receiver: (RBVariableNode named: #isMyTask) selector: #ifTrue:ifFalse: arguments: {RBBlockNode body: (RBSequenceNode statements: {RBMessageNode receiver: (RBVariableNode named: #aTask) selector: #completed: arguments: {RBLiteralValueNode value: true. }. RBReturnNode value: (RBLiteralValueNode value: true). }). RBBlockNode body: (RBSequenceNode statements: {RBReturnNode value: (RBLiteralValueNode value: false). }). }. })',				#node : 'RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #aTask) selector: #employees) selector: #do: arguments: {RBBlockNode arguments: {RBVariableNode named: #e. } body: (RBSequenceNode statements: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #e) selector: #\'==\' arguments: {RBVariableNode named: #self. }) selector: #ifTrue: arguments: {RBBlockNode body: (RBSequenceNode statements: {RBAssignmentNode variable: (RBVariableNode named: #isMyTask) value: (RBLiteralValueNode value: true). }). }. }). }',				#nodeClass : Class [ #Employee ]			},			#nodeFound : true,			#comment : '',			#author : 'TestReviewer',			#timeStamp : DateAndTime [ '2021-12-26T14:38:01.47203-03:00' ]		}	],	#packages : Set [		@4	],	#gitDirectory : 'pharo-local/iceberg/nahux/CCTestApp'}